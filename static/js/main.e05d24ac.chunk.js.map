{"version":3,"sources":["components/RecipeDetails.module.css","components/RecipeList.module.css","components/Recipe.module.css","components/Recipe.js","components/RecipeList.js","components/RecipeDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","props","console","log","className","src","image","alt","title","style","color","fontSize","paddingLeft","onClick","showDetailsHandler","id","recipeList","Fragment","textAlign","classes","heading","onSubmit","handleSubmit","type","onChange","handleChange","value","searchValue","placeholder","aria-label","aria-describedby","cardDeck","recipes","map","Recipe","key","RecipeDetails","summary","this","dishTypeStr","recipeInformation","dishTypes","index","join","height","servings","readyInMinutes","button","backToRecipes","imageUrl","class","recipeDetails","dangerouslySetInnerHTML","__html","listStyle","ingredients","item","amount","us","unit","name","instructions","length","index1","steps","index2","step","flexDirection","sideDish","target","without","rel","href","sourceUrl","React","Component","process","API_KEY","App","state","base_URL","searchRecipeId","query","searchImageUrl","searchTitle","getRecipes","fetch","then","response","json","data","setState","apiCalls","url1","url2","url3","url4","Promise","all","response1","response2","response3","response4","data1","data2","data3","data4","e","preventDefault","componentToRender","RecipeList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e05d24ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"RecipeDetails_title__1XDJL\",\"heading\":\"RecipeDetails_heading__3O5h6\",\"button\":\"RecipeDetails_button__1lNsA\",\"sideDish\":\"RecipeDetails_sideDish__357WT\",\"recipeDetails\":\"RecipeDetails_recipeDetails__rC_I9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardDeck\":\"RecipeList_cardDeck__2MeF5\",\"heading\":\"RecipeList_heading__3oYNT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardImage\":\"Recipe_cardImage__WR9oa\"};","import React from 'react';\nimport classes from './Recipe.module.css';\n\nconst recipe = (props) => {\n    console.log(props);\n    return (\n        <div className=\"card\">\n                <img src={props.recipe.image} className=\"card-img-top img-fluid\" alt={props.recipe.title} />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title text-uppercase\" style={{color: 'rgb(253,159,0)'}}>{props.recipe.title}</h5>\n                    {/*<p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>*/}  \n                </div>\n                <div className=\"d-flex justify-content-start card-footer\" style={{fontSize:'14px', paddingLeft:'20px'}} >\n                    <button className=\"border-danger text-danger bg-white mr-2\" \n                            onClick={()=>props.showDetailsHandler(props.recipe.id, props.recipe.image, props.recipe.title)}\n                            >View Details\n                    </button> \n                </div>\n        </div>\n    );\n}\n\nexport default recipe;","import React from 'react';\nimport Recipe from './Recipe';\nimport classes from './RecipeList.module.css';\n\nconst recipeList = (props) => {\n    return (\n        <React.Fragment>\n            <header style={{textAlign:'center'}} className={classes.heading}><div>Recipe Search</div></header>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-6 mx-auto\">\n                        <form onSubmit={props.handleSubmit}>\n                            <div className=\"input-group mb-3\">\n                                <input type=\"text\" \n                                    onChange={props.handleChange}\n                                    value={props.searchValue}\n                                    className=\"form-control\" \n                                    placeholder=\"Enter ingredients...(separated by comma)\" \n                                    aria-label=\"input field\" aria-describedby=\"basic-addon2\" />\n                                <div className=\"input-group-append\">\n                                    <button type='submit' className=\"input-group-text\" id=\"basic-addon2\">Submit</button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <div className={classes.cardDeck}>\n                            {props.recipes.map(recipe => <Recipe key={recipe.title} \n                                                                recipe={recipe} \n                                                                showDetailsHandler={props.showDetailsHandler }\n                                                        />)\n                            }\n                </div>       \n        </div>\n\n        </React.Fragment>\n       \n    );\n}\n\nexport default recipeList;","import React from 'react';\nimport classes from './RecipeDetails.module.css';\n\nclass RecipeDetails extends React.Component{\n    render(){\n        let summary = this.props.summary;\n        let dishTypeStr = '';\n        if(this.props.recipeInformation.dishTypes){\n            let dishType = this.props.recipeInformation.dishTypes.map((type,index)=>type);\n            dishTypeStr = dishType.join(\", \");\n        }\n         \n        return (\n            <React.Fragment>\n                <div className='container'>\n                    <p className={classes.title}>{this.props.title}</p>\n                    <hr />\n                    <div className='row justify-content-center mb-2'>\n                         <div className='col-md-10 align-items-center d-flex mb-2' style={{height:'64px'}}>\n                            <div className='mr-2 mt-1'><strong style={{color:'rgb(253,159,0)'}}>YIELD</strong> {this.props.recipeInformation.servings} servings</div>\n                            <div className='mt-1'><strong style={{color:'rgb(253,159,0)'}}>TIME</strong> {this.props.recipeInformation.readyInMinutes} minutes</div>\n                            <button className={`ml-auto ${classes.button}`} onClick={this.props.backToRecipes}>Back to All Recipes</button>\n                        </div>\n                        \n                        <div className='col-md-6 col-lg-4'>\n                            <img className='mb-2' src={this.props.imageUrl} alt={this.props.title}/>\n                        </div>\n                        <div className='col-md-6'>\n                            <div class={classes.recipeDetails} dangerouslySetInnerHTML={{ __html:summary }} />\n                        </div>\n                    </div>\n                    <hr />\n                    <div className='row justify-content-center'>\n                        <div className='col-md-6 col-lg-4'>\n                            <h1 className={classes.heading}>Ingredients</h1>\n                                    <hr />\n                            <ul style={{listStyle:'none'}}>\n                                {this.props.ingredients.map((item,index)=>{\n                                    return <li key={index}>{item.amount.us.value} {item.amount.us.unit} {item.name}</li>;\n                                })}\n                            </ul>\n                        </div>\n                        <div className='col-md-6'>\n                                    {this.props.instructions.length?\n                            <React.Fragment>\n                            <h1 className={classes.heading}>Instructions</h1>\n                            <hr />\n                                {this.props.instructions.map((item,index1)=>{\n                                    return <div key={index1}>\n                                        <h4>{item.name}</h4>\n                                        <ol>\n                                        {item.steps.map((item,index2)=>{\n                                        return <li key={index2}>{item.step}</li>\n                                        })}\n                                        </ol>\n                                    </div>;\n                                })}\n                            </React.Fragment>\n                            :null}\n                        </div>\n                    </div>\n                    <hr />\n                    {\n                        this.props.recipeInformation.dishTypes?\n                        <div className='row' style={{flexDirection:'column'}}>\n                            <div className=\"col-12\">\n                                <h1 className={classes.heading}>Dish Type</h1>\n                                <p className={classes.sideDish}>{dishTypeStr}</p>\n                            </div>\n                           \n                        </div>\n                        :null\n                    }\n                    <div className='row'>\n                        <div className=\"col-12 d-flex\">\n                            <a target='_blank' without rel=\"noopener noreferrer\" className={classes.button} href={this.props.recipeInformation.sourceUrl}>Go to Recipe Website</a>\n                            <button className={classes.button} onClick={this.props.backToRecipes}>Back to All Recipes</button>\n                        </div>\n                    </div>   \n                    <br />  \n                </div>\n            </React.Fragment>\n            \n        );\n    }\n\n}\n\nexport default RecipeDetails;","import React from 'react';\nimport './App.css';\nimport RecipeList from './components/RecipeList';\nimport RecipeDetails from './components/RecipeDetails'\n\nconsole.log('key',process.env.REACT_APP_API_KEY);\nconst API_KEY = process.env.REACT_APP_API_KEY;\nclass App extends React.Component {\n  state = {\n    base_URL: 'https://api.spoonacular.com/recipes/search',\n    recipes: [],\n    recipeDetails: false,\n    searchRecipeId:'',\n    ingredients: [],\n    instructions: [],\n    searchValue:'',\n    query:'chicken',\n    summary: '',\n    searchImageUrl: '',\n    searchTitle: '',\n    recipeInformation: {}\n  }\n\n  getRecipes = () => {\n    fetch(`https://api.spoonacular.com/recipes/findByIngredients?apiKey=${API_KEY}&ingredients=${this.state.query}&number=10`)\n    .then(response=>response.json())\n    .then(data=>{\n      console.log('data:',data);\n      this.setState({recipes: data});\n    })\n  }\n  componentDidMount(){\n    this.getRecipes();\n  }\n\n  backToRecipes = () => {\n    this.setState({recipeDetails: false})\n  }\n\n  apiCalls = () => {\n    let url1 = `https://api.spoonacular.com/recipes/${this.state.searchRecipeId}/ingredientWidget.json?apiKey=${API_KEY}`;\n    let url2 = `https://api.spoonacular.com/recipes/${this.state.searchRecipeId}/analyzedInstructions?apiKey=${API_KEY}`;\n    let url3 = `https://api.spoonacular.com/recipes/${this.state.searchRecipeId}/summary?apiKey=${API_KEY}`;\n    let url4 = `https://api.spoonacular.com/recipes/${this.state.searchRecipeId}/information?apiKey=${API_KEY}`;\n    Promise.all([fetch(url1), fetch(url2),  fetch(url3), fetch(url4)])\n    .then(([response1, response2, response3, response4])=> Promise.all([response1.json(), \n                                                                        response2.json(), \n                                                                        response3.json(), \n                                                                        response4.json()]))\n    .then(([data1, data2, data3, data4])=> this.setState({ingredients: data1.ingredients, \n                                                          instructions: data2, \n                                                          summary: data3.summary, \n                                                          recipeInformation: data4}))\n  }\n\n  showDetailsHandler=(id, imageUrl, title)=> {\n    this.setState(()=>{return {searchRecipeId: id, \n                              recipeDetails:true, \n                              searchImageUrl: imageUrl, \n                              searchTitle: title}}, \n                              this.apiCalls);\n    /*this.setState(()=>{return {searchRecipeId: id, recipeDetails:true}}, ()=>{\n      fetch(`https://api.spoonacular.com/recipes/${this.state.searchRecipeId}/ingredientWidget.json?apiKey=${API_KEY}`)\n        .then(response=>response.json())\n        .then(data=>{\n        this.setState({ingredients: data.ingredients});\n      });\n      fetch(`https://api.spoonacular.com/recipes/${this.state.searchRecipeId}/analyzedInstructions?apiKey=${API_KEY}`)\n        .then(response=>response.json())\n        .then(data=>{\n        this.setState({instructions: data});\n      })\n    });*/\n  }\n\n  handleChange = (e) => {\n    this.setState({searchValue: e.target.value});\n  }\n \n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState(()=>{return {query: this.state.searchValue}},\n    ()=>{\n      this.getRecipes();\n    });\n  }\n  render(){\n    console.log(this.state);\n    let componentToRender =  <RecipeList recipes={this.state.recipes} \n                                         searchValue={this.state.searchValue}\n                                         showDetailsHandler={this.showDetailsHandler}\n                                         handleChange={this.handleChange}\n                                         handleSubmit={this.handleSubmit}\n                                         />;\n    if(this.state.recipeDetails){\n      componentToRender = <RecipeDetails searchRecipeId={this.state.searchRecipeId} \n                                         ingredients={this.state.ingredients} \n                                         backToRecipes={this.backToRecipes}\n                                         instructions={this.state.instructions}\n                                         summary={this.state.summary}\n                                         imageUrl={this.state.searchImageUrl}\n                                         title={this.state.searchTitle}\n                                         recipeInformation={this.state.recipeInformation}/>\n    }\n    return (\n      <React.Fragment>\n       {componentToRender}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}